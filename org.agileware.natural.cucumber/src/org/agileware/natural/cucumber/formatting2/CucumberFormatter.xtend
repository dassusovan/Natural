/*
 * generated by Xtext
 */
package org.agileware.natural.cucumber.formatting2

import com.google.inject.Inject
import org.agileware.natural.cucumber.cucumber.Background
import org.agileware.natural.cucumber.cucumber.DocString
import org.agileware.natural.cucumber.cucumber.Example
import org.agileware.natural.cucumber.cucumber.Feature
import org.agileware.natural.cucumber.cucumber.Narrative
import org.agileware.natural.cucumber.cucumber.NarrativeLine
import org.agileware.natural.cucumber.cucumber.Scenario
import org.agileware.natural.cucumber.cucumber.ScenarioOutline
import org.agileware.natural.cucumber.cucumber.Step
import org.agileware.natural.cucumber.cucumber.Table
import org.agileware.natural.cucumber.cucumber.Tag
import org.agileware.natural.cucumber.services.CucumberGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class CucumberFormatter extends AbstractFormatter2 {

	@Inject extension CucumberGrammarAccess

	def dispatch void format(Feature model, extension IFormattableDocument document) {
		// format top-level tags
		for (t : model.tags) t.format()
		
		// format narrative
		model.narrative.format()

		// format background
		model.background.format()

		// format scenarios
		for (s : model.scenarios) s.format()

		// indent interior
		model.interior[indent]

		//println("********** DOCUMENT FORMAT **********")
		//println(document)
	}
	
	def dispatch void format(Tag model, extension IFormattableDocument document) {
		// TODO ...
	}

	def dispatch void format(Narrative model, extension IFormattableDocument document) {
		// Format lines
		for (l : model.lines) {
			l.format()
		}
		
		// indent interior
		model.interior[indent]
	}

	def dispatch void format(NarrativeLine model, extension IFormattableDocument document) {
		// Add indentation to left side of line
		//model.prepend[indent]
	}

	def dispatch void format(Background model, extension IFormattableDocument document) {
		// format narrative
		model.narrative.format()
		
		// format steps
		for (s : model.steps) s.format()

		// indent interior
		model.interior[indent]
	}

	def dispatch void format(Scenario model, extension IFormattableDocument document) {
		// format tags
		for (t : model.tags) t.format()
		
		// format narrative
		model.narrative.format()
		
		// format steps
		for (s : model.steps) s.format()
		
		// indent interior
		model.interior[indent]
	}

	def dispatch void format(ScenarioOutline model, extension IFormattableDocument document) {
		// format tags
		for (t : model.tags) t.format()
		
		// format narrative
		model.narrative.format()
		
		// format steps
		for (s : model.steps) s.format()

		// format examples
		for (e : model.examples) e.format()

		// indent interior
		model.interior[indent]
	}

	def dispatch void format(Step model, extension IFormattableDocument document) {
		// format table
		if(model.table !== null) model.table.format()
		
		// format text
		if(model.text !== null) model.text.format()
		
		// indent interior
		model.interior[indent]
	}
	
	def dispatch void format(Table model, extension IFormattableDocument document) {
		// TODO...
	}

	def dispatch void format(DocString model, extension IFormattableDocument document) {
		// TODO...
	}
	
	def dispatch void format(Example model, extension IFormattableDocument document) {
		// format tags
		for (t : model.tags) t.format()

		// format narrative
		model.narrative.format()
		
		// format table
		model.table.format()
		
		// indent interior
		model.interior[indent]
	}





}
