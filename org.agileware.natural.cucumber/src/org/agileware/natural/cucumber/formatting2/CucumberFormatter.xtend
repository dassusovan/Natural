/*
 * generated by Xtext
 */
package org.agileware.natural.cucumber.formatting2

import com.google.inject.Inject
import javax.swing.text.TableView.TableRow
import org.agileware.natural.cucumber.cucumber.Background
import org.agileware.natural.cucumber.cucumber.DocString
import org.agileware.natural.cucumber.cucumber.Example
import org.agileware.natural.cucumber.cucumber.Feature
import org.agileware.natural.cucumber.cucumber.Scenario
import org.agileware.natural.cucumber.cucumber.ScenarioOutline
import org.agileware.natural.cucumber.cucumber.Step
import org.agileware.natural.cucumber.cucumber.Table
import org.agileware.natural.cucumber.cucumber.Tag
import org.agileware.natural.cucumber.services.CucumberGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

import static org.agileware.natural.cucumber.cucumber.CucumberPackage.Literals.*

/**
 * Each AST element has been given its own formatting directive so they can be individually
 * formatted on its own. As a consequence, each element should apply formatting rules
 * without any assumptions about elements not contained within its own node. This means,
 * for example, indentation rules should be applied by a parent node, and not the target node.
 * This will ensure formatting is preserved within the document as a whole, whilst formatting
 * individual elements.
 * 
 * TODO: There are still some cases where the above "law" is being violated. This will need
 *       to be fixed for formatting to work correctly.
 */
class CucumberFormatter extends AbstractFormatter2 {
	
	@Inject extension CucumberGrammarAccess

	def dispatch void format(Feature model, extension IFormattableDocument document) {
		 println(textRegionAccess)
		
		// Remove blank lines at the top of document
		model.prepend[setNewLines(0)]
		
		// format top-level tags
		for (t : model.tags) t.format()
		
		// Adjust spacing around keyword
		model.regionFor.keyword(featureAccess.featureKeyword_2)
				.prepend[noSpace]
				.append[oneSpace]
		
		// Trim whitespace at the end of title
		model.regionFor.feature(FEATURE__TITLE)
				.append[noSpace]

		// format narrative
		// TODO...

		// format background
		model.background.format()

		// format scenarios
		for (s : model.scenarios) s.format()
		
	 	println(document)
	}

	def dispatch void format(Tag model, extension IFormattableDocument document) {
		// Trim white space around tags and place each tag in single line
		model.surround[noSpace].append[newLine]
		model.regionFor.keyword(tagAccess.commercialAtKeyword_0)
			.surround[noSpace]
	}

	def dispatch void format(Background model, extension IFormattableDocument document) {
		
		// Append blank line above region
		model.prepend[setNewLines(2)]
		
		// Adjust spacing around keyword
		model.regionFor.keyword(backgroundAccess.backgroundKeyword_1)
				.append[oneSpace]
		
		// Trim whitespace at the end of title
		model.regionFor.feature(BACKGROUND__TITLE)
				.append[noSpace]
		
		// format steps
//		val begin = model.regionFor.ruleCallTo(NLRule)
//		val end = model.steps.last.regionFor.ruleCallTo(NLRule)
//		interior(begin, end)[indent]

		for (s : model.steps) {
			s.format()
//			s.prepend[indent]
		}
	}

	def dispatch void format(Scenario model, extension IFormattableDocument document) {

		// Append blank line above region
		model.prepend[setNewLines(2)]
		
		// format tags
		for (t : model.tags) t.format()
		
		// Adjust spacing around keyword
		model.regionFor.keyword(scenarioAccess.scenarioKeyword_2)
				.append[oneSpace]
		
		// Trim whitespace at end of title
		model.regionFor.feature(ABSTRACT_SCENARIO__TITLE)
				.append[noSpace]
		
		// format steps
//		val begin = model.regionFor.ruleCallTo(NLRule)
//		val end = model.steps.last.regionFor.ruleCallTo(NLRule)
//		interior(begin, end)[indent]

		for (s : model.steps) {
			s.format()
//			s.prepend[indent]
		}
	}

	def dispatch void format(ScenarioOutline model, extension IFormattableDocument document) {
		
		// Append blank line above region
		model.prepend[setNewLines(2)]
		
		// format tags
		for (t : model.tags) t.format()

		// Adjust spacing around keyword
		model.regionFor.keyword(scenarioOutlineAccess.scenarioKeyword_1)
				.append[oneSpace]
		
		// Trim whitespace at end of title
		model.regionFor.feature(ABSTRACT_SCENARIO__TITLE)
				.append[noSpace]
				
		// format steps
//		val begin = model.regionFor.ruleCallTo(NLRule)
//		val end = model.steps.last.regionFor.ruleCallTo(NLRule)
//		interior(begin, end)[indent]
//
		for (s : model.steps) {
			s.format()
//			s.prepend[indent]
		}

		// format examples
		for (e : model.examples) e.format()
	}
	
	def dispatch void format(Example model, extension IFormattableDocument document) {
		
		// Append blank line above region
		model.prepend[setNewLines(2)]
		
		// format tags
		for (t : model.tags) t.format()

		// format table
		model.table.format()
	}

	def dispatch void format(Step model, extension IFormattableDocument document) {
		
		// Adjust spacing around keyword
		model.regionFor.feature(STEP__KEYWORD)
				.append[oneSpace]
				
		// Trim whitespace at the end of description
		model.regionFor.feature(STEP__DESCRIPTION)
				.append[noSpace]
				
		// format table | text
		if(model.table !== null) model.table.format()
		if(model.text !== null) model.text.format()
	}

	def dispatch void format(Table model, extension IFormattableDocument document) {
		// TODO...
	}


	def dispatch void format(DocString model, extension IFormattableDocument document) {
		// TODO...
	}

}
